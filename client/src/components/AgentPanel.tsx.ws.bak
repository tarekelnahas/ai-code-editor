import React, { useState } from 'react';
import { useWebSocket } from '../hooks/useWebSocket';

interface AiMessage {
  type: string;
  content: string;
}

// AI completion function using REST API
async function aiComplete(prompt: string, role = "general") {
  const res = await fetch("http://127.0.0.1:8000/ai/complete", {
    method: "POST",
    headers: {"Content-Type":"application/json"},
    body: JSON.stringify({ prompt, role })
  });
  if (!res.ok) { 
    throw new Error(`AI request failed: ${res.status} - ${res.statusText}`); 
  }
  return await res.json(); // { model, content }
}

/**
 * AgentPanel displays streaming output from the AI backend and allows the
 * user to submit prompts. Multiple agents could be supported in the
 * future by extending the message format. Messages are assumed to be
 * JSON objects with type and content fields.
 */
const AgentPanel: React.FC = () => {
  const { ready, send, messages } = useWebSocket<AiMessage>('ws://localhost:8000/ws/ai');
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [aiMessages, setAiMessages] = useState<AiMessage[]>([]);

  const handleSubmit = () => {
    if (!input.trim()) return;
    send({ type: 'user', content: input });
    setInput('');
  };

  const handleAiComplete = async () => {
    if (!input.trim() || isLoading) return;
    
    const userInput = input.trim();
    setInput('');
    setIsLoading(true);
    
    // Add user message to AI messages
    const userMessage: AiMessage = { type: 'user', content: userInput };
    setAiMessages(prev => [...prev, userMessage]);
    
    try {
      const result = await aiComplete(userInput, "general");
      const aiMessage: AiMessage = { 
        type: 'assistant', 
        content: `[${result.model}] ${result.content}` 
      };
      setAiMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      const errorMessage: AiMessage = { 
        type: 'error', 
        content: `Error: ${error instanceof Error ? error.message : 'Unknown error'}` 
      };
      setAiMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-y-auto p-2 space-y-2">
        <div className="text-xs text-gray-500 mb-2">WebSocket Messages:</div>
        {messages.map((msg, idx) => (
          <div key={`ws-${idx}`} className="text-sm whitespace-pre-wrap">
            <strong className="capitalize">{msg.type}: </strong>
            <span>{msg.content}</span>
          </div>
        ))}
        
        <div className="text-xs text-gray-500 mb-2 border-t pt-2">AI REST API Messages:</div>
        {aiMessages.map((msg, idx) => (
          <div key={`ai-${idx}`} className="text-sm whitespace-pre-wrap">
            <strong className={`capitalize ${msg.type === 'error' ? 'text-red-500' : 'text-blue-500'}`}>
              {msg.type}: 
            </strong>
            <span>{msg.content}</span>
          </div>
        ))}
        
        {isLoading && (
          <div className="text-sm text-gray-500 italic">
            <strong>AI: </strong>Thinking...
          </div>
        )}
      </div>
      <div className="border-t dark:border-gray-700 border-gray-200 p-2 flex gap-2">
        <input
          type="text"
          className="flex-1 bg-transparent outline-none px-2 py-1 rounded border dark:border-gray-700 border-gray-300"
          placeholder={ready ? 'Ask the agent…' : 'Connecting…'}
          value={input}
          disabled={isLoading}
          onChange={e => setInput(e.target.value)}
          onKeyDown={e => {
            if (e.key === 'Enter') {
              e.preventDefault();
              if (e.shiftKey) {
                handleSubmit(); // WebSocket
              } else {
                handleAiComplete(); // REST API
              }
            }
          }}
        />
        <button
          className="bg-green-600 text-white px-3 py-1 rounded disabled:opacity-50 text-xs"
          disabled={!input.trim() || isLoading}
          onClick={handleAiComplete}
        >
          {isLoading ? 'AI...' : 'AI'}
        </button>
        <button
          className="bg-blue-600 text-white px-3 py-1 rounded disabled:opacity-50 text-xs"
          disabled={!ready || !input.trim()}
          onClick={handleSubmit}
        >
          WS
        </button>
      </div>
    </div>
  );
};

export default AgentPanel;